name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "‚úÖ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found - this is required"
            exit 1
          fi
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile not found - this is required"
            exit 1
          fi
          echo "‚úÖ Project structure looks good"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=main
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build args if needed for build stage
          build-args: |
            NODE_ENV=production

      - name: Verify pushed images
        run: |
          echo "‚úÖ Build and push completed successfully"
          echo "Tags pushed: ${{ steps.meta.outputs.tags }}"
          echo "You can check your image at: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/my-gspa-app"
    
  deploy-to-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for image availability
        run: |
          echo "Waiting for Docker Hub image propagation..."
          sleep 60

      - name: Get commit SHA for image tag
        id: sha
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e

            # Export environment variables
            export MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
            export MYSQL_DATABASE='${{ secrets.MYSQL_DATABASE }}'
            export MYSQL_USER='${{ secrets.MYSQL_USER }}'
            export MYSQL_PASSWORD='${{ secrets.MYSQL_PASSWORD }}'

            # Login to Docker Hub
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

            cd /home/${{ secrets.SSH_USER }}/app

            # Create environment file with proper DATABASE_URL for Docker container
            cat > .env << ENDFILE
            DATABASE_URL=mysql://$MYSQL_USER:$MYSQL_PASSWORD@host.docker.internal:3306/$MYSQL_DATABASE
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}
            NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
            GMAIL_USER=${{ secrets.GMAIL_USER }}
            GMAIL_PASS=${{ secrets.GMAIL_PASS }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            SEED_ADMIN_EMAIL=admin@gspa.com
            SEED_ADMIN_PASSWORD=Admin@123!
            ENDFILE

            echo "Skipping MySQL setup - assuming database is already configured"
            if mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "USE $MYSQL_DATABASE; SELECT 1;" 2>/dev/null; then
              echo "‚úÖ MySQL connection successful from VPS"
            else
              echo "‚ö†Ô∏è MySQL connection failed but continuing - app may handle it"
            fi

            # ===== FORCE CLEAN DEPLOYMENT =====
            echo "üßπ FORCE CLEANING EXISTING CONTAINERS AND IMAGES..."

            # Stop and remove any existing app container (forcefully)
            echo "Stopping and removing existing containers..."
            docker stop gspa-app 2>/dev/null || echo "No gspa-app container to stop"
            docker rm -f gspa-app 2>/dev/null || echo "No gspa-app container to remove"

            # Remove any other containers that might be using the same image
            echo "Removing any other containers using the same image..."
            docker ps -a --filter "ancestor=${{ env.IMAGE_NAME }}" --format "{{.ID}}" | xargs -r docker rm -f || true

            # Remove dangling containers
            echo "Removing stopped containers..."
            docker container prune -f

            # Remove old images to free space and ensure fresh pull
            echo "Removing old images..."
            docker images ${{ env.IMAGE_NAME }} -q | xargs -r docker rmi -f || true

            # Clean up dangling images
            echo "Cleaning up dangling images..."
            docker image prune -f

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            SHA_SHORT="${{ steps.sha.outputs.sha_short }}"

            echo "üîÑ PULLING FRESH DOCKER IMAGE..."

            # Try multiple tags in order of preference
            SELECTED_TAG=""
            for TAG in "main-$SHA_SHORT" "main" "latest"; do
              echo "Trying to pull tag: $TAG"
              if docker pull $IMAGE_NAME:$TAG; then
                echo "‚úÖ Successfully pulled FRESH image with tag: $TAG"
                SELECTED_TAG="$TAG"
                break
              else
                echo "‚ùå Failed to pull tag: $TAG"
              fi
            done

            if [ -z "$SELECTED_TAG" ]; then
              echo "üö® CRITICAL: Could not pull any Docker image!"
              echo "Available tags on Docker Hub:"
              curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-gspa-app/tags/?page_size=10" | jq -r '.results[].name' 2>/dev/null || echo "Cannot fetch tags"
              exit 1
            fi

            echo "üéØ STARTING FRESH CONTAINER WITH TAG: $SELECTED_TAG"
            
            # Start completely fresh container with host.docker.internal support
            docker run -d \
              --name gspa-app \
              --env-file /home/${{ secrets.SSH_USER }}/app/.env \
              --add-host=host.docker.internal:host-gateway \
              -p 3000:3000 \
              --restart unless-stopped \
              $IMAGE_NAME:$SELECTED_TAG

            echo "‚è≥ Waiting for fresh application to start..."
            for i in {1..30}; do
              if curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "‚úÖ FRESH Application is healthy and responding"
                break
              fi
              echo "‚è≥ Waiting for fresh application to start... ($i/30)"
              sleep 5
            done

            # Test database connection from inside container first
            echo "Testing database connection from inside container..."
            if docker exec gspa-app node -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              prisma.\$queryRaw\`SELECT 1\`
                .then(() => {
                  console.log('‚úÖ Database connection successful from container');
                  process.exit(0);
                })
                .catch(err => {
                  console.error('‚ùå Database connection failed from container:', err.message);
                  process.exit(1);
                });
            " 2>/dev/null; then
              echo "‚úÖ Database connection test passed - migrations should work"
            else
              echo "‚ùå Database connection test failed - trying alternative connection method"
              # Try using the host's IP directly as fallback
              HOST_IP=$(hostname -I | awk '{print $1}')
              echo "Trying with host IP: $HOST_IP"
              sed -i "s/host.docker.internal/$HOST_IP/g" /home/${{ secrets.SSH_USER }}/app/.env
              docker restart gspa-app
              sleep 10
            fi

            # Run migrations with better error handling
            echo "Running Prisma migrations on fresh container..."
            MIGRATION_SUCCESS=false
            for i in {1..3}; do
              echo "Migration attempt $i/3..."
              if docker exec gspa-app npx prisma migrate deploy; then
                echo "‚úÖ Migrations completed successfully on fresh container"
                MIGRATION_SUCCESS=true
                break
              else
                echo "‚ùå Migration attempt $i failed"
                if [ $i -lt 3 ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done

            if [ "$MIGRATION_SUCCESS" != "true" ]; then
              echo "‚ö†Ô∏è Migrations failed but continuing deployment"
              echo "This might be because:"
              echo "1. Database is already up to date"
              echo "2. There are connection issues"
              echo "3. Migration files are missing"
              echo "Checking current database status..."
              docker exec gspa-app npx prisma db status || echo "Cannot check database status"
            fi

            # Run seeding (optional)
            echo "Running Prisma seed on fresh container..."
            if docker exec gspa-app npm run db:seed; then
              echo "‚úÖ Seeding completed successfully on fresh container"
            else
              echo "‚ö†Ô∏è Seeding failed but continuing deployment"
            fi

            echo "=== FRESH CONTAINER STATUS ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # Final health check
            if curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "‚úÖ üéâ FRESH DEPLOYMENT COMPLETED SUCCESSFULLY! Application is running on clean container."
            else
              echo "‚ö†Ô∏è Fresh deployment completed but application health check failed"
              echo "Debug info:"
              docker logs gspa-app --tail 30
            fi

            # Final cleanup
            echo "Performing final cleanup..."
            docker image prune -f

            echo "üöÄ FRESH DEPLOYMENT PROCESS FINISHED!"