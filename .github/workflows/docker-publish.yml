name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "‚úÖ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          echo "üìÅ Checking for config files:"
          ls -la *.mjs *.js *.json 2>/dev/null || echo "No config files found"
          if [ ! -d "prisma" ]; then
            echo "‚ùå prisma directory not found - creating it"
            mkdir -p prisma
            # Create basic schema using echo commands
            echo 'generator client {' > prisma/schema.prisma
            echo '  provider = "prisma-client-js"' >> prisma/schema.prisma
            echo '}' >> prisma/schema.prisma
            echo '' >> prisma/schema.prisma
            echo 'datasource db {' >> prisma/schema.prisma
            echo '  provider = "mysql"' >> prisma/schema.prisma
            echo '  url      = env("DATABASE_URL")' >> prisma/schema.prisma
            echo '}' >> prisma/schema.prisma
            echo '' >> prisma/schema.prisma
            echo 'model Example {' >> prisma/schema.prisma
            echo '  id   Int    @id @default(autoincrement())' >> prisma/schema.prisma
            echo '  name String' >> prisma/schema.prisma
            echo '}' >> prisma/schema.prisma
            echo "‚úÖ Created prisma directory with basic schema"
          else
            echo "‚úÖ prisma directory exists"
            echo "üìÅ Contents of prisma directory:"
            ls -la prisma/
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }},${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    # deploy-to-vps:
    #   needs: build-and-push
    #   runs-on: ubuntu-latest
    #   steps:
  deploy-to-vps:
        needs: build-and-push
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
          - name: Wait for the image to be available
            run: sleep 45

          - name: Get commit SHA for image tag
            id: sha
            run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

          - name: Deploy to VPS via SSH
            uses: appleboy/ssh-action@v1.0.0
            with:
                host: ${{ secrets.SSH_HOST }}
                username: ${{ secrets.SSH_USER }}
                key: ${{ secrets.SSH_PRIVATE_KEY }}
                port: ${{ secrets.SSH_PORT || 22 }}
                script: |
                    set -e  # Exit on any error
                    
                    # Login to Docker Hub securely
                    echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
                    
                    # Navigate to app directory
                    cd /home/${{ secrets.SSH_USER }}/app
                    
                    # Create environment file
                    cat > .env << 'ENDFILE'
                    DATABASE_URL=mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}
                    NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
                    NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
                    JWT_SECRET=${{ secrets.JWT_SECRET }}
                    RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
                    PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}
                    NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}
                    NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
                    NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
                    GMAIL_USER=${{ secrets.GMAIL_USER }}
                    GMAIL_PASS=${{ secrets.GMAIL_PASS }}
                    EMAIL_FROM=${{ secrets.EMAIL_FROM }}
                    SEED_ADMIN_EMAIL=admin@gspa.com
                    SEED_ADMIN_PASSWORD=Admin@123!
                    ENDFILE
                    
                    # Ensure MySQL service is running
                    echo "Starting MySQL service..."
                    sudo systemctl start mysql || echo "MySQL might already be running"
                    sudo systemctl enable mysql || echo "MySQL enable might have failed"
                    
                    # Wait for MySQL to be ready
                    echo "Waiting for MySQL to be ready..."
                    for i in {1..30}; do
                        if sudo mysql -h localhost -u root -e "SELECT 1;" > /dev/null 2>&1; then
                        echo "‚úÖ MySQL is ready!"
                        break
                        else
                        echo "‚è≥ Waiting for MySQL... attempt $i/30"
                        sleep 2
                        fi
                        if [ $i -eq 30 ]; then
                        echo "‚ùå MySQL failed to start"
                        exit 1
                        fi
                    done
                    
                    # Create production database and user if they don't exist
                    echo "Setting up production database..."
                    sudo mysql -h localhost -u root << EOF
                    CREATE DATABASE IF NOT EXISTS ${{ secrets.MYSQL_DATABASE }};
                    CREATE USER IF NOT EXISTS '${{ secrets.MYSQL_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';
                    CREATE USER IF NOT EXISTS '${{ secrets.MYSQL_USER }}'@'%' IDENTIFIED BY '${{ secrets.MYSQL_PASSWORD }}';
                    GRANT ALL PRIVILEGES ON ${{ secrets.MYSQL_DATABASE }}.* TO '${{ secrets.MYSQL_USER }}'@'localhost';
                    GRANT ALL PRIVILEGES ON ${{ secrets.MYSQL_DATABASE }}.* TO '${{ secrets.MYSQL_USER }}'@'%';
                    FLUSH PRIVILEGES;
                    EOF
                    echo "‚úÖ Production database setup complete"
                    
                    # Stop and remove existing container if it exists
                    echo "Stopping existing container..."
                    docker stop gspa-app || echo "No container to stop"
                    docker rm gspa-app || echo "No container to remove"
                    
                    # Wait for Docker Hub image propagation
                    echo "Waiting for Docker Hub image propagation..."
                    sleep 30
                    
                    # Use the correct image tags (main and main-SHA, with latest as fallback)
                    IMAGE_NAME="${{ env.IMAGE_NAME }}"
                    SHA_SHORT="${{ steps.sha.outputs.sha_short }}"
                    
                    echo "Pulling Docker image with tag: main"
                    if docker pull $IMAGE_NAME:main; then
                        echo "‚úÖ Successfully pulled image with tag: main"
                        SELECTED_TAG="main"
                    else
                        echo "Trying tag: main-$SHA_SHORT"
                        if docker pull $IMAGE_NAME:main-$SHA_SHORT; then
                        echo "‚úÖ Successfully pulled image with tag: main-$SHA_SHORT"
                        SELECTED_TAG="main-$SHA_SHORT"
                        else
                        echo "Trying fallback tag: latest"
                        if docker pull $IMAGE_NAME:latest; then
                            echo "‚úÖ Successfully pulled image with tag: latest"
                            SELECTED_TAG="latest"
                        else
                            echo "üö® CRITICAL: Could not pull any Docker image!"
                            echo "Available tags for $IMAGE_NAME:"
                            # Try to list available tags
                            curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-gspa-app/tags/?page_size=10" | jq -r '.results[].name' 2>/dev/null || echo "Cannot list tags - repository might be private"
                            exit 1
                        fi
                        fi
                    fi
                    
                    # Start the application
                    echo "Starting application container with tag: $SELECTED_TAG"
                    docker run -d \
                        --name gspa-app \
                        --env-file /home/${{ secrets.SSH_USER }}/app/.env \
                        -p 127.0.0.1:3000:3000 \
                        --restart unless-stopped \
                        $IMAGE_NAME:$SELECTED_TAG
                    
                    # Wait for app to start with health check
                    echo "Waiting for application to start..."
                    for i in {1..20}; do
                        if docker ps | grep gspa-app | grep -q "Up"; then
                        echo "‚úÖ Container is running"
                        break
                        else
                        echo "‚è≥ Container not ready yet... attempt $i/20"
                        sleep 5
                        fi
                        if [ $i -eq 20 ]; then
                        echo "‚ö†Ô∏è Container might be having issues starting"
                        docker logs gspa-app --tail 20 || echo "Cannot get container logs"
                        fi
                    done
                    
                    # Wait longer for the app to fully initialize
                    echo "Waiting for application to fully initialize..."
                    sleep 30
                    
                    # Run Prisma migrations with retry logic
                    echo "Running database migrations..."
                    for i in {1..5}; do
                        if docker exec gspa-app npx prisma migrate deploy; then
                        echo "‚úÖ Migrations completed successfully"
                        break
                        else
                        echo "‚ùå Migration attempt $i failed, retrying in 10 seconds..."
                        sleep 10
                        fi
                        if [ $i -eq 5 ]; then
                        echo "üö® All migration attempts failed"
                        docker logs gspa-app --tail 50
                        exit 1
                        fi
                    done
                    
                    # Run Prisma seeding with retry logic
                    echo "Running database seeding..."
                    for i in {1..5}; do
                        if docker exec gspa-app npm run db:seed; then
                        echo "‚úÖ Seeding completed successfully"
                        break
                        else
                        echo "‚ùå Seeding attempt $i failed, retrying in 10 seconds..."
                        sleep 10
                        fi
                        if [ $i -eq 5 ]; then
                        echo "‚ö†Ô∏è Seeding failed but continuing deployment"
                        docker logs gspa-app --tail 50
                        break
                        fi
                    done
                    
                    # Verify database was created and has tables
                    echo "Verifying database setup..."
                    sudo mysql -h localhost -u root -e "USE ${{ secrets.MYSQL_DATABASE }}; SHOW TABLES;" || echo "Could not verify database tables"
                    
                    # Final health check
                    echo "Performing final health check..."
                    sleep 15
                    if curl -f http://localhost:3000/ > /dev/null 2>&1; then
                        echo "‚úÖ Application is healthy and accessible"
                    else
                        echo "‚ö†Ô∏è Application health check failed but container is running"
                        docker logs gspa-app --tail 30
                    fi
                    
                    # Clean up old images
                    echo "Cleaning up unused Docker images..."
                    docker image prune -f
                    
                    echo "üöÄ Deployment completed successfully!"