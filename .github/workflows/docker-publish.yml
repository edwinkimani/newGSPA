name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "✅ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify prisma directory
        run: |
          echo "🔍 Checking project structure..."
          ls -la
          if [ ! -d "prisma" ]; then
            echo "❌ prisma directory not found - creating it"
            mkdir -p prisma
            # Create basic schema using echo commands instead of heredoc
            echo 'generator client {' > prisma/schema.prisma
            echo '  provider = "prisma-client-js"' >> prisma/schema.prisma
            echo '}' >> prisma/schema.prisma
            echo '' >> prisma/schema.prisma
            echo 'datasource db {' >> prisma/schema.prisma
            echo '  provider = "mysql"' >> prisma/schema.prisma
            echo '  url      = env("DATABASE_URL")' >> prisma/schema.prisma
            echo '}' >> prisma/schema.prisma
            echo '' >> prisma/schema.prisma
            echo 'model Example {' >> prisma/schema.prisma
            echo '  id   Int    @id @default(autoincrement())' >> prisma/schema.prisma
            echo '  name String' >> prisma/schema.prisma
            echo '}' >> prisma/schema.prisma
            echo "✅ Created prisma directory with basic schema"
          else
            echo "✅ prisma directory exists"
            echo "📁 Contents of prisma directory:"
            ls -la prisma/
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true  # Disable cache to ensure fresh build

  deploy-to-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for the image to be available
        run: sleep 30

      - name: Get commit SHA for image tag
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: ${{ secrets.SSH_PORT || 22 }}
            script: |
                set -e  # Exit on any error
                
                # Login to Docker Hub securely
                echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
                
                # Navigate to app directory
                cd /home/${{ secrets.SSH_USER }}/app
                
                # Create environment file
                cat > .env << 'ENDFILE'
                DATABASE_URL=mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}
                NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
                NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
                JWT_SECRET=${{ secrets.JWT_SECRET }}
                RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
                PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}
                NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}
                NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
                NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
                GMAIL_USER=${{ secrets.GMAIL_USER }}
                GMAIL_PASS=${{ secrets.GMAIL_PASS }}
                EMAIL_FROM=${{ secrets.EMAIL_FROM }}
                SEED_ADMIN_EMAIL=admin@gspa.com
                SEED_ADMIN_PASSWORD=Admin@123!
                ENDFILE
                
                # Ensure MySQL service is running (with proper sudo handling)
                echo "Starting MySQL service..."
                sudo systemctl start mysql || echo "MySQL might already be running"
                sudo systemctl enable mysql || echo "MySQL enable might have failed"
                
                # Stop and remove existing container if it exists
                echo "Stopping existing container..."
                docker stop gspa-app || echo "No container to stop"
                docker rm gspa-app || echo "No container to remove"
                
                # Wait for Docker Hub image propagation
                echo "Waiting for Docker Hub image propagation..."
                sleep 30
                
                # Try multiple possible image tags
                IMAGE_TAGS=("main" "main-${{ steps.sha.outputs.sha_short }}" "latest")
                IMAGE_NAME="${{ env.IMAGE_NAME }}"
                SELECTED_TAG=""
                
                echo "Attempting to pull Docker image with different tags..."
                for TAG in "${IMAGE_TAGS[@]}"; do
                    echo "Trying tag: $TAG"
                    if docker pull $IMAGE_NAME:$TAG; then
                    echo "✅ Successfully pulled image with tag: $TAG"
                    SELECTED_TAG=$TAG
                    break
                    else
                    echo "❌ Failed to pull with tag: $TAG"
                    fi
                done
                
                if [ -z "$SELECTED_TAG" ]; then
                    echo "🚨 CRITICAL: Could not pull any Docker image!"
                    echo "Available tags in repository:"
                    # Try to list available tags (this might not work for private repos without additional auth)
                    curl -s -H "Authorization: Bearer $(echo '${{ secrets.DOCKER_PASSWORD }}' | base64)" \
                    "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-gspa-app/tags/" | jq -r '.results[].name' || echo "Cannot list tags"
                    exit 1
                fi
                
                # Start the application
                echo "Starting application container with tag: $SELECTED_TAG"
                docker run -d \
                    --name gspa-app \
                    --env-file /home/${{ secrets.SSH_USER }}/app/.env \
                    --network host \
                    -p 80:3000 \
                    --restart unless-stopped \
                    $IMAGE_NAME:$SELECTED_TAG
                
                # Wait for app to start with health check
                echo "Waiting for application to start..."
                for i in {1..10}; do
                    if docker ps | grep gspa-app | grep -q "Up"; then
                    echo "✅ Container is running and healthy"
                    break
                    else
                    echo "⏳ Container not ready yet... attempt $i/10"
                    sleep 10
                    fi
                    if [ $i -eq 10 ]; then
                    echo "⚠️ Container might be having issues starting"
                    docker logs gspa-app || echo "Cannot get container logs"
                    fi
                done
                
                # Run Prisma migrations only if container is running
                echo "Running database migrations..."
                sleep 20  # Give app more time to initialize
                if docker exec gspa-app npx prisma migrate deploy; then
                    echo "✅ Migrations completed successfully"
                else
                    echo "❌ Migrations failed, but continuing deployment"
                fi
                
                # Run Prisma seeding
                echo "Running database seeding..."
                if docker exec gspa-app npm run db:seed; then
                    echo "✅ Seeding completed successfully"
                else
                    echo "❌ Seeding failed, but continuing deployment"
                fi
                
                # Final health check
                echo "Performing final health check..."
                sleep 10
                if curl -f http://localhost:3000/api/health; then
                    echo "✅ Application is healthy"
                else
                    echo "⚠️ Health check failed but container is running"
                    docker logs gspa-app --tail 50
                fi
                
                # Clean up old images
                echo "Cleaning up unused Docker images..."
                docker image prune -f
                
                echo "🚀 Deployment completed successfully!"