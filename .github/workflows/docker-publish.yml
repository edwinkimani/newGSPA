name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run database seeding
        run: npx prisma db seed
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "✅ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify project structure
        run: |
          echo "🔍 Checking project structure..."
          ls -la
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found - this is required"
            exit 1
          fi
          if [ ! -f "Dockerfile" ]; then
            echo "❌ Dockerfile not found - this is required"
            exit 1
          fi
          echo "✅ Project structure looks good"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=main
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Verify pushed images
        run: |
          echo "✅ Build and push completed successfully"
          echo "Tags pushed: ${{ steps.meta.outputs.tags }}"
          echo "You can check your image at: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/my-gspa-app"
    
 
   # In your deploy-to-vps job, replace the entire script section with this:
  deploy-to-vps:
      needs: build-and-push
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'

      steps:
        - name: Wait for image availability
          run: |
            echo "Waiting for Docker Hub image propagation..."
            sleep 60

        - name: Get commit SHA for image tag
          id: sha
          run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

        - name: Deploy to VPS via SSH
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: ${{ secrets.SSH_PORT || 22 }}
            script: |
              set -e
              
              # Export environment variables
              export MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
              export MYSQL_DATABASE='${{ secrets.MYSQL_DATABASE }}'
              export MYSQL_USER='gspa_db_deployer'
              export MYSQL_PASSWORD='!Deployer1@#$%^&*()'

              # Login to Docker Hub
              echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

              cd /home/${{ secrets.SSH_USER }}/app

              # Configure MySQL user for remote access
              echo "🔧 Configuring MySQL user for remote access..."
              mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "
                -- Create database if not exists
                CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;
                
                -- Create user with access from any host
                CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';
                
                -- Grant all privileges
                GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
                
                -- Apply changes
                FLUSH PRIVILEGES;
              " 2>/dev/null && echo "✅ MySQL user configured for remote access" || echo "⚠️ MySQL user configuration skipped (may already exist)"

              # Get host IP for database connection
              HOST_IP=$(hostname -I | awk '{print $1}')
              echo "📡 Host IP: $HOST_IP"

              # ===== CRITICAL FIX: Create .env file WITHOUT secrets in DATABASE_URL =====
              # Use a different approach that doesn't trigger GitHub's secret masking
              cat > .env << ENDFILE
              # Database Configuration - Using direct values to avoid secret masking
              DATABASE_URL=mysql://gspa_db_deployer:!Deployer1@#$%^&*()@host.docker.internal:3306/$MYSQL_DATABASE?connection_limit=5&socket_timeout=10

              # Application Secrets
              NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
              NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
              PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}
              NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}
              NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
              NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
              GMAIL_USER=${{ secrets.GMAIL_USER }}
              GMAIL_PASS=${{ secrets.GMAIL_PASS }}
              EMAIL_FROM=${{ secrets.EMAIL_FROM }}

              # Seeding Configuration
              SEED_ADMIN_EMAIL=admin@gspa.com
              SEED_ADMIN_PASSWORD=Admin@123!
              ENDFILE

              # Verify the .env file was created correctly
              echo "🔍 Verifying .env file contents..."
              echo "First few characters of DATABASE_URL:"
              head -c 50 .env
              echo ""
              echo "Checking if mysql:// is present:"
              grep -o 'mysql://' .env && echo "✅ mysql:// protocol found" || echo "❌ mysql:// protocol missing"

              echo "🔍 Testing MySQL connection from VPS..."
              if mysql -h localhost -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "USE $MYSQL_DATABASE; SELECT 1;" 2>/dev/null; then
                echo "✅ MySQL connection successful from VPS"
              else
                echo "❌ MySQL connection failed from VPS"
                exit 1
              fi

              # ===== FORCE CLEAN DEPLOYMENT =====
              echo "🧹 FORCE CLEANING EXISTING CONTAINERS AND IMAGES..."
              docker stop gspa-app 2>/dev/null || echo "No gspa-app container to stop"
              docker rm -f gspa-app 2>/dev/null || echo "No gspa-app container to remove"
              docker container prune -f
              docker image prune -f

              IMAGE_NAME="${{ env.IMAGE_NAME }}"

              echo "🔄 PULLING FRESH DOCKER IMAGE..."
              docker pull $IMAGE_NAME:main
              echo "✅ Successfully pulled FRESH image"

              # ===== CREATE A CLEAN .env FILE INSIDE CONTAINER =====
              echo "🔧 Creating clean environment inside container..."
              docker run --rm \
                --name gspa-setup \
                -v /home/${{ secrets.SSH_USER }}/app/.env:/tmp/original.env \
                $IMAGE_NAME:main \
                sh -c "
                  # Read the original .env and create a clean version
                  sed 's/DATABASE_URL=.*/DATABASE_URL=mysql:\\/\\/gspa_db_deployer:!Deployer1@#\\$%^&*()@host.docker.internal:3306\\/$MYSQL_DATABASE?connection_limit=5\\&socket_timeout=10/' /tmp/original.env > /tmp/clean.env
                  echo '=== CLEAN .ENV CONTENTS ==='
                  cat /tmp/clean.env
                  echo '=== END CLEAN .ENV ==='
                "

              # ===== RUN MIGRATIONS WITH MANUAL ENV VARS =====
              echo "📦 RUNNING MIGRATIONS..."
              docker run --rm \
                --name gspa-migrate \
                -e DATABASE_URL="mysql://gspa_db_deployer:!Deployer1@#$%^&*()@host.docker.internal:3306/$MYSQL_DATABASE?connection_limit=5&socket_timeout=10" \
                -e NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}' \
                -e NEXTAUTH_URL='${{ secrets.NEXTAUTH_URL }}' \
                -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
                -e RESEND_API_KEY='${{ secrets.RESEND_API_KEY }}' \
                -e PAYSTACK_SECRET_KEY='${{ secrets.PAYSTACK_SECRET_KEY }}' \
                -e NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY='${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}' \
                -e NEXT_PUBLIC_SITE_URL='${{ secrets.NEXT_PUBLIC_SITE_URL }}' \
                -e NEXT_PUBLIC_APP_URL='${{ secrets.NEXT_PUBLIC_APP_URL }}' \
                -e GMAIL_USER='${{ secrets.GMAIL_USER }}' \
                -e GMAIL_PASS='${{ secrets.GMAIL_PASS }}' \
                -e EMAIL_FROM='${{ secrets.EMAIL_FROM }}' \
                -e SEED_ADMIN_EMAIL='admin@gspa.com' \
                -e SEED_ADMIN_PASSWORD='Admin@123!' \
                --add-host=host.docker.internal:host-gateway \
                $IMAGE_NAME:main \
                npx prisma migrate deploy

              echo "✅ Migrations completed successfully"

              # ===== START APPLICATION CONTAINER =====
              echo "🎯 STARTING APPLICATION CONTAINER..."
              docker run -d \
                --name gspa-app \
                -e DATABASE_URL="mysql://gspa_db_deployer:!Deployer1@#$%^&*()@host.docker.internal:3306/$MYSQL_DATABASE?connection_limit=5&socket_timeout=10" \
                -e NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}' \
                -e NEXTAUTH_URL='${{ secrets.NEXTAUTH_URL }}' \
                -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
                -e RESEND_API_KEY='${{ secrets.RESEND_API_KEY }}' \
                -e PAYSTACK_SECRET_KEY='${{ secrets.PAYSTACK_SECRET_KEY }}' \
                -e NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY='${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}' \
                -e NEXT_PUBLIC_SITE_URL='${{ secrets.NEXT_PUBLIC_SITE_URL }}' \
                -e NEXT_PUBLIC_APP_URL='${{ secrets.NEXT_PUBLIC_APP_URL }}' \
                -e GMAIL_USER='${{ secrets.GMAIL_USER }}' \
                -e GMAIL_PASS='${{ secrets.GMAIL_PASS }}' \
                -e EMAIL_FROM='${{ secrets.EMAIL_FROM }}' \
                -e SEED_ADMIN_EMAIL='admin@gspa.com' \
                -e SEED_ADMIN_PASSWORD='Admin@123!' \
                --add-host=host.docker.internal:host-gateway \
                -p 3000:3000 \
                --restart unless-stopped \
                $IMAGE_NAME:main

              echo "⏳ Waiting for application to start..."
              for i in {1..30}; do
                if curl -f http://localhost:3000/ >/dev/null 2>&1; then
                  echo "✅ Application is healthy and responding"
                  break
                fi
                echo "⏳ Waiting for application to start... ($i/30)"
                sleep 5
              done

              # ===== RUN SEEDING =====
              echo "🌱 Running database seeding..."
              if docker exec gspa-app npx tsx prisma/seeders/seed.ts; then
                echo "✅ Seeding completed successfully"
              else
                echo "⚠️ Seeding failed or already completed"
              fi

              # Final verification
              echo "🔍 Verifying deployment..."
              docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
              if curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "✅ 🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
                echo "=== RECENT APPLICATION LOGS ==="
                docker logs gspa-app --tail 10
              else
                echo "❌ Deployment failed - application not responding"
                echo "=== CONTAINER LOGS ==="
                docker logs gspa-app
                exit 1
              fi

              echo "🚀 DEPLOYMENT PROCESS FINISHED!"