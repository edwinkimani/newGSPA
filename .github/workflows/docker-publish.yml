name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "‚úÖ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          if [ ! -d "prisma" ]; then
            echo "‚ùå prisma directory not found - creating it"
            mkdir -p prisma
            cat <<EOF > prisma/schema.prisma
            generator client {
              provider = "prisma-client-js"
            }

            datasource db {
              provider = "mysql"
              url      = env("DATABASE_URL")
            }

            model Example {
              id   Int    @id @default(autoincrement())
              name String
            }
            EOF
            echo "‚úÖ Created prisma directory with basic schema"
          else
            echo "‚úÖ prisma directory exists"
            ls -la prisma/
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }},${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    
  deploy-to-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for image availability
        run: sleep 45

      - name: Get commit SHA for image tag
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e

            # Export environment variables
            export MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
            export MYSQL_DATABASE='${{ secrets.MYSQL_DATABASE }}'
            export MYSQL_USER='${{ secrets.MYSQL_USER }}'
            export MYSQL_PASSWORD='${{ secrets.MYSQL_PASSWORD }}'

            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

            cd /home/${{ secrets.SSH_USER }}/app

            # Create environment file
            cat > .env << ENDFILE
            DATABASE_URL=mysql://$MYSQL_USER:$MYSQL_PASSWORD@localhost:3306/$MYSQL_DATABASE
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}
            NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
            GMAIL_USER=${{ secrets.GMAIL_USER }}
            GMAIL_PASS=${{ secrets.GMAIL_PASS }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            SEED_ADMIN_EMAIL=admin@gspa.com
            SEED_ADMIN_PASSWORD=Admin@123!
            ENDFILE

            # ===== APPLICATION DEPLOYMENT =====
            echo "Stopping any existing container..."
            docker stop gspa-app 2>/dev/null || true
            docker rm gspa-app 2>/dev/null || true

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            SHA_SHORT="${{ steps.sha.outputs.sha_short }}"
            SELECTED_TAG="main-$SHA_SHORT"

            echo "Pulling latest image..."
            docker pull $IMAGE_NAME:$SELECTED_TAG || docker pull $IMAGE_NAME:latest

            echo "Starting new container..."
            docker run -d \
              --name gspa-app \
              --env-file /home/${{ secrets.SSH_USER }}/app/.env \
              -p 3000:3000 \
              --restart unless-stopped \
              $IMAGE_NAME:$SELECTED_TAG

            echo "Waiting for app to start..."
            for i in {1..30}; do
              if curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "‚úÖ Application is healthy"
                break
              fi
              echo "‚è≥ Waiting... ($i/30)"
              sleep 5
            done

            echo "Running Prisma migrations..."
            docker exec gspa-app npx prisma migrate deploy || echo "‚ö†Ô∏è Migration failed"

            echo "Running Prisma seed..."
            docker exec gspa-app npm run db:seed || echo "‚ö†Ô∏è Seeding failed"

            echo "=== Container Status ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            if curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "‚úÖ üéâ Deployment successful!"
            else
              echo "‚ö†Ô∏è Deployment completed, but app not responding"
              docker logs gspa-app --tail 20
            fi

            docker image prune -f
            echo "üöÄ Deployment finished"
