name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run database seeding
        run: npx prisma db seed
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "‚úÖ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found - this is required"
            exit 1
          fi
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile not found - this is required"
            exit 1
          fi
          echo "‚úÖ Project structure looks good"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=main
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Verify pushed images
        run: |
          echo "‚úÖ Build and push completed successfully"
          echo "Tags pushed: ${{ steps.meta.outputs.tags }}"
          echo "You can check your image at: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/my-gspa-app"
    
 
   # In your deploy-to-vps job, replace the entire script section with this:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e

            # Login to Docker Hub
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

            cd /home/${{ secrets.SSH_USER }}/app

            # Get host IP for logging
            HOST_IP=$(hostname -I | awk '{print $1}')
            echo "üì° Host IP: $HOST_IP"

            # ===== FORCE CLEAN DEPLOYMENT =====
            echo "üßπ FORCE CLEANING EXISTING CONTAINERS AND IMAGES..."
            docker stop gspa-app 2>/dev/null || echo "No gspa-app container to stop"
            docker rm -f gspa-app 2>/dev/null || echo "No gspa-app container to remove"
            docker container prune -f
            docker image prune -f

            IMAGE_NAME="${{ env.IMAGE_NAME }}"

            echo "üîÑ PULLING FRESH DOCKER IMAGE..."
            docker pull $IMAGE_NAME:main
            echo "‚úÖ Successfully pulled FRESH image"

            # ===== START APPLICATION CONTAINER =====
            echo "üéØ STARTING APPLICATION CONTAINER WITH HOST NETWORK..."
            docker run -d \
              --name gspa-app \
              --network="host" \
              -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
              -e NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}' \
              -e NEXTAUTH_URL='${{ secrets.NEXTAUTH_URL }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e RESEND_API_KEY='${{ secrets.RESEND_API_KEY }}' \
              -e PAYSTACK_SECRET_KEY='${{ secrets.PAYSTACK_SECRET_KEY }}' \
              -e NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY='${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}' \
              -e NEXT_PUBLIC_SITE_URL='${{ secrets.NEXT_PUBLIC_SITE_URL }}' \
              -e NEXT_PUBLIC_APP_URL='${{ secrets.NEXT_PUBLIC_APP_URL }}' \
              -e GMAIL_USER='${{ secrets.GMAIL_USER }}' \
              -e GMAIL_PASS='${{ secrets.GMAIL_PASS }}' \
              -e EMAIL_FROM='${{ secrets.EMAIL_FROM }}' \
              -e SEED_ADMIN_EMAIL='admin@gspa.com' \
              -e SEED_ADMIN_PASSWORD='Admin@123!' \
              --restart unless-stopped \
              $IMAGE_NAME:main

            echo "‚è≥ Waiting for application to start..."
            for i in {1..30}; do
              if curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "‚úÖ Application is healthy and responding"
                break
              fi
              echo "‚è≥ Waiting for application to start... ($i/30)"
              sleep 5
            done

            # ===== RUN MIGRATIONS =====
            echo "üì¶ RUNNING MIGRATIONS FROM INSIDE CONTAINER..."
            if docker exec gspa-app npx prisma migrate deploy; then
              echo "‚úÖ Migrations completed successfully"
            else
              echo "‚ùå Migrations failed - trying alternative approach..."
              docker run --rm \
                --network="host" \
                -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
                $IMAGE_NAME:main \
                npx prisma migrate deploy
              echo "‚úÖ Migrations completed successfully with alternative approach"
            fi

            # ===== RUN SEEDING =====
            echo "üå± Running database seeding..."
            if docker exec gspa-app npx tsx prisma/seeders/seed.ts; then
              echo "‚úÖ Seeding completed successfully"
            else
              echo "‚ö†Ô∏è Seeding failed or already completed"
            fi

            # ===== FINAL VERIFICATION =====
            echo "üîç Verifying deployment..."
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            if curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "‚úÖ üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
              echo "=== RECENT APPLICATION LOGS ==="
              docker logs gspa-app --tail 10
            else
              echo "‚ùå Deployment failed - application not responding"
              echo "=== CONTAINER LOGS ==="
              docker logs gspa-app
              exit 1
            fi

            echo "üöÄ DEPLOYMENT PROCESS FINISHED!"
