name: Build and Deploy Next.js App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/my-gspa-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: test_gspa_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Wait for MySQL to be ready
        run: |
          timeout 60s bash -c 'until mysql -h 127.0.0.1 -u root -ptest_root_password -e "SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          echo "MySQL is ready!"

      - name: Reset test database
        run: |
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "DROP DATABASE IF EXISTS test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE DATABASE test_gspa_db;"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "GRANT ALL PRIVILEGES ON test_gspa_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -u root -ptest_root_password -e "FLUSH PRIVILEGES;"
          echo "Database reset complete"

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run database seeding
        run: npx prisma db seed
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_gspa_db

      - name: Run build validation
        run: |
          npm run build
          echo "‚úÖ Build successful - application validation passed"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found - this is required"
            exit 1
          fi
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile not found - this is required"
            exit 1
          fi
          echo "‚úÖ Project structure looks good"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=main
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Verify pushed images
        run: |
          echo "‚úÖ Build and push completed successfully"
          echo "Tags pushed: ${{ steps.meta.outputs.tags }}"
          echo "You can check your image at: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/my-gspa-app"
    
  deploy-to-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for image availability
        run: |
          echo "Waiting for Docker Hub image propagation..."
          sleep 60

      - name: Get commit SHA for image tag
        id: sha
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
      
            # Export environment variables
            export MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
            export MYSQL_DATABASE='${{ secrets.MYSQL_DATABASE }}'
            export MYSQL_USER='gspa_db_deployer'
            export MYSQL_PASSWORD='!Deployer1@#$%^&*()'

            # Login to Docker Hub
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

            cd /home/${{ secrets.SSH_USER }}/app

            # Configure MySQL user for remote access
            echo "üîß Configuring MySQL user for remote access..."
            mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "
              -- Create database if not exists
              CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;
              
              -- Create user with access from any host
              CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';
              
              -- Grant all privileges
              GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
              
              -- Apply changes
              FLUSH PRIVILEGES;
              
              -- Verify user creation
              SELECT user, host FROM mysql.user WHERE user = '$MYSQL_USER';
            " 2>/dev/null && echo "‚úÖ MySQL user configured for remote access" || echo "‚ö†Ô∏è MySQL user configuration had issues"

            # Get host IP for database connection fallback
            HOST_IP=$(hostname -I | awk '{print $1}')
            echo "üì° Host IP: $HOST_IP"

            # Create environment file with PROPERLY ENCODED DATABASE_URL
            cat > .env << ENDFILE
            # Database Configuration - Use proper URL encoding for special characters
            DATABASE_URL=mysql://gspa_db_deployer:!Deployer1@%23%24%25%5E%26*()@host.docker.internal:3306/$MYSQL_DATABASE?connection_limit=5&socket_timeout=10
            DATABASE_URL_DIRECT=mysql://gspa_db_deployer:!Deployer1@%23%24%25%5E%26*()@$HOST_IP:3306/$MYSQL_DATABASE?connection_limit=5&socket_timeout=10
            
            # Application Secrets
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}
            NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
            GMAIL_USER=${{ secrets.GMAIL_USER }}
            GMAIL_PASS=${{ secrets.GMAIL_PASS }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            
            # Seeding Configuration
            SEED_ADMIN_EMAIL=admin@gspa.com
            SEED_ADMIN_PASSWORD=Admin@123!
            ENDFILE

            echo "üîç Testing MySQL connection from VPS..."
            if mysql -h localhost -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "USE $MYSQL_DATABASE; SELECT 1;" 2>/dev/null; then
              echo "‚úÖ MySQL connection successful from VPS"
            else
              echo "‚ùå MySQL connection failed from VPS - testing with root user..."
              mysql -h localhost -u root -p"$MYSQL_ROOT_PASSWORD" -e "SHOW DATABASES;" 2>/dev/null && echo "‚úÖ Root connection works" || echo "‚ùå Root connection also failed"
            fi

            # ===== FORCE CLEAN DEPLOYMENT =====
            echo "üßπ FORCE CLEANING EXISTING CONTAINERS AND IMAGES..."

            # Stop and remove any existing app container
            echo "Stopping and removing existing containers..."
            docker stop gspa-app 2>/dev/null || echo "No gspa-app container to stop"
            docker rm -f gspa-app 2>/dev/null || echo "No gspa-app container to remove"

            # Remove any other containers using the same image
            echo "Removing any other containers using the same image..."
            docker ps -a --filter "ancestor=${{ env.IMAGE_NAME }}" --format "{{.ID}}" | xargs -r docker rm -f || true

            # Clean up containers and images
            echo "Cleaning up containers and images..."
            docker container prune -f
            docker images ${{ env.IMAGE_NAME }} -q | xargs -r docker rmi -f || true
            docker image prune -f

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            SHA_SHORT="${{ steps.sha.outputs.sha_short }}"

            echo "üîÑ PULLING FRESH DOCKER IMAGE..."

            # Try multiple tags in order of preference
            SELECTED_TAG=""
            for TAG in "main-$SHA_SHORT" "main" "latest"; do
              echo "Trying to pull tag: $TAG"
              if docker pull $IMAGE_NAME:$TAG; then
                echo "‚úÖ Successfully pulled FRESH image with tag: $TAG"
                SELECTED_TAG="$TAG"
                break
              else
                echo "‚ùå Failed to pull tag: $TAG"
              fi
            done

            if [ -z "$SELECTED_TAG" ]; then
              echo "üö® CRITICAL: Could not pull any Docker image!"
              echo "Available tags on Docker Hub:"
              curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/my-gspa-app/tags/?page_size=10" | jq -r '.results[].name' 2>/dev/null || echo "Cannot fetch tags"
              exit 1
            fi

            echo "üéØ STARTING FRESH CONTAINER WITH TAG: $SELECTED_TAG"
            
            # Start fresh container with proper network configuration
            docker run -d \
              --name gspa-app \
              --env-file /home/${{ secrets.SSH_USER }}/app/.env \
              --add-host=host.docker.internal:host-gateway \
              --network="host" \
              -p 3000:3000 \
              --restart unless-stopped \
              $IMAGE_NAME:$SELECTED_TAG

            echo "‚è≥ Waiting for fresh application to start..."
            for i in {1..30}; do
              if curl -f http://localhost:3000/ >/dev/null 2>&1; then
                echo "‚úÖ FRESH Application is healthy and responding"
                break
              fi
              echo "‚è≥ Waiting for fresh application to start... ($i/30)"
              sleep 5
            done

            # Test database connection from container
            echo "üîß Testing database connection from container..."
            
            # Wait a bit for the app to fully start
            sleep 15

            # Run migrations with proper error handling
            echo "üì¶ Running Prisma migrations..."
            MIGRATION_SUCCESS=false
            for i in {1..5}; do
              echo "Migration attempt $i/5..."
              if docker exec gspa-app npx prisma migrate deploy; then
                echo "‚úÖ Migrations completed successfully"
                MIGRATION_SUCCESS=true
                break
              else
                echo "‚ùå Migration attempt $i failed"
                echo "Debug info:"
                docker exec gspa-app npx prisma db status 2>/dev/null || echo "Cannot check database status"
                if [ $i -lt 5 ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done

            if [ "$MIGRATION_SUCCESS" != "true" ]; then
              echo "üö® CRITICAL: All migration attempts failed!"
              echo "Checking database connection..."
              docker exec gspa-app node -e "
                const { PrismaClient } = require('@prisma/client');
                const prisma = new PrismaClient();
                prisma.\$queryRaw\`SELECT 1\`
                  .then(() => console.log('‚úÖ Database connection works'))
                  .catch(err => console.log('‚ùå Database connection failed:', err.message))
                  .finally(() => prisma.\$disconnect());
              " 2>/dev/null || echo "Cannot test database connection"
              exit 1
            fi

            # Run seeding with multiple approaches
            echo "üå± Running database seeding..."
            SEED_SUCCESS=false
            
            # Try TypeScript seeding first
            if docker exec gspa-app npx tsx prisma/seeders/seed.ts 2>/dev/null; then
              echo "‚úÖ Seeding completed successfully with tsx"
              SEED_SUCCESS=true
            elif docker exec gspa-app npx prisma db seed 2>/dev/null; then
              echo "‚úÖ Seeding completed successfully with prisma db seed"
              SEED_SUCCESS=true
            elif docker exec gspa-app npm run db:seed 2>/dev/null; then
              echo "‚úÖ Seeding completed successfully with npm script"
              SEED_SUCCESS=true
            else
              echo "‚ö†Ô∏è Seeding failed - trying direct node execution..."
              # Try direct node execution if package.json has seed script
              if docker exec gspa-app node -e "
                require('tsx/dist/cli').main(['prisma/seeders/seed.ts']).catch(console.error);
              " 2>/dev/null; then
                echo "‚úÖ Seeding completed with direct node execution"
                SEED_SUCCESS=true
              else
                echo "‚ö†Ô∏è Seeding failed - this might be expected if already seeded or no seed script exists"
              fi
            fi

            # Verify seeding worked by checking for admin user
            if [ "$SEED_SUCCESS" = "true" ]; then
              echo "üîç Verifying seed data..."
              docker exec gspa-app node -e "
                const { PrismaClient } = require('@prisma/client');
                const prisma = new PrismaClient();
                prisma.user.findMany()
                  .then(users => {
                    console.log('‚úÖ Users in database:', users.length);
                    if (users.length > 0) {
                      console.log('First user email:', users[0].email);
                    }
                  })
                  .catch(err => console.log('‚ùå Cannot verify users:', err.message))
                  .finally(() => prisma.\$disconnect());
              " 2>/dev/null || echo "Cannot verify seed data"
            fi

            echo "=== CONTAINER STATUS ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # Final health check
            if curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "‚úÖ üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
              echo "Application is running and accessible"
              
              # Show recent logs for verification
              echo "=== RECENT APPLICATION LOGS ==="
              docker logs gspa-app --tail 20
            else
              echo "‚ö†Ô∏è Deployment completed but health check failed"
              echo "Debug info:"
              docker logs gspa-app --tail 50
              exit 1
            fi

            # Final cleanup
            echo "üßπ Performing final cleanup..."
            docker image prune -f

            echo "üöÄ DEPLOYMENT PROCESS FINISHED!"