name: Deploy to cPanel via FTP

on:
  push:
    branches:
      - main

jobs:
  ftp-deploy:
    name: FTP Deploy
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout your code
      - name: Checkout code
        uses: actions/checkout@v3

      # ✅ Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # ✅ Generate .env.production for public variables
      - name: Generate .env.production
        run: |
          echo "NEXT_PUBLIC_SITE_URL=https://globalsecurityalliance.org" >> .env.production
          echo "NEXT_PUBLIC_APP_URL=https://globalsecurityalliance.org" >> .env.production
          echo "NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}" >> .env.production
          echo "PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_URL=https://quintjtreswyjxxogcjt.supabase.co" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.production

      # ✅ Remove static export from Next.js config for Node.js server
      - name: Configure Next.js for Node.js Server
        run: |
          if [ -f "next.config.js" ]; then
            # Remove output: 'export' if it exists
            sed -i '/output:.*export/d' next.config.js
            sed -i '/trailingSlash:.*true/d' next.config.js
            sed -i '/images:.*{/,/}/d' next.config.js
            echo "✓ Updated existing next.config.js for Node.js server"
          else
            # Create basic Next.js config
            cat > next.config.js << 'EOL'
            /** @type {import('next').NextConfig} */
            const nextConfig = {
              eslint: {
                ignoreDuringBuilds: true
              }
            }
            module.exports = nextConfig
            EOL
            echo "✓ Created next.config.js for Node.js server"
          fi

      # ✅ Install dependencies, generate Prisma client, seed DB, and build
      - name: Install, Generate Prisma Client, Seed DB, Build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TOKEN_EXPIRY: ${{ secrets.TOKEN_EXPIRY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        run: |
          npm ci
          npx prisma generate
          npx prisma db seed
          npm run build

      # ✅ Create .htaccess for reverse proxy (to be deployed to public_html)
      - name: Create Reverse Proxy .htaccess
        run: |
          cat > public_html_htaccess << 'EOL'
          RewriteEngine On

          # Redirect HTTP to HTTPS
          RewriteCond %{HTTPS} off
          RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

          # Enable proxy modules
          <IfModule mod_proxy.c>
            <IfModule mod_proxy_http.c>
              ProxyPreserveHost On
              ProxyPass / http://localhost:3000/
              ProxyPassReverse / http://localhost:3000/
            </IfModule>
          </IfModule>

          # Fallback if proxy modules are not available
          RewriteCond %{REQUEST_URI} !^/\.well-known/
          RewriteRule ^(.*)$ http://localhost:3000/$1 [P,L]

          # Error document for proxy failures
          ErrorDocument 502 "Application is starting up. Please try again in a moment."
          ErrorDocument 503 "Application is undergoing maintenance. Please try again later."
          EOL

      # ✅ Create package.json for production (if needed)
      - name: Create Production package.json
        run: |
          if [ -f "package.json" ]; then
            # Ensure start script exists for cPanel
            if ! grep -q '"start"' package.json; then
              # Add start script to existing package.json
              npm pkg set scripts.start="next start -p 3000"
              echo "✓ Added start script to package.json"
            fi
          else
            echo "⚠️ No package.json found"
          fi

      # ✅ Clean up unnecessary files before deployment
      - name: Prepare Deployment Directory
        run: |
          # Remove development files but keep build artifacts
          rm -rf node_modules
          rm -rf .git
          rm -rf prisma
          rm -rf .github
          rm -f .env
          rm -f .env.local
          rm -f .env.development
          rm -f README.md
          
          # Keep .next folder for production
          if [ -d ".next" ]; then
            echo "✓ .next build directory preserved"
            ls -la .next/
          fi

      # ✅ Test network connectivity first
      - name: Test FTP Server Connectivity
        run: |
          nslookup ${{ secrets.FTP_SERVER }} || echo "DNS lookup failed"
          ping -c 3 ${{ secrets.FTP_SERVER }} || echo "Ping test failed"

      # ✅ Deploy App to Node.js Directory (/newGSPA/)
      - name: Deploy App to Node.js Directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          server-dir: /newGSPA/
          local-dir: ./
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.github/*
            **/node_modules/*
            **/.env*
            **/README.md
            **/prisma/*

      # ✅ Deploy .htaccess to public_html for reverse proxy
      - name: Deploy Reverse Proxy to public_html
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          server-dir: /public_html/
          local-dir: ./
          dangerous-clean-slate: true
          include: |
            public_html_htaccess
        env:
          FTP_DEPLOY_ACTION_RENAME: 'public_html_htaccess=>.htaccess'

      # ✅ Create deployment success marker
      - name: Create Deployment Marker
        run: |
          echo "Deployment completed: $(date)" > deployment-success.txt
          echo "Branch: ${{ github.ref }}" >> deployment-success.txt
          echo "Commit: ${{ github.sha }}" >> deployment-success.txt

      # ✅ Upload deployment marker
      - name: Upload Deployment Marker
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          server-dir: /newGSPA/
          local-dir: ./
          include: |
            deployment-success.txt