name: Deploy to cPanel via FTP

on:
  push:
    branches:
      - main

jobs:
  ftp-deploy:
    name: FTP Deploy
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout your code
      - name: Checkout code
        uses: actions/checkout@v3

      # ✅ Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # ✅ Increase Node.js memory limit
      - name: Set Node.js Memory Limit
        run: echo "NODE_OPTIONS=--max-old-space-size=1024" >> $GITHUB_ENV

      # ✅ Generate .env.production for public variables
      - name: Generate .env.production
        run: |
          echo "NEXT_PUBLIC_SITE_URL=https://globalsecurityalliance.org" >> .env.production
          echo "NEXT_PUBLIC_APP_URL=https://globalsecurityalliance.org" >> .env.production
          echo "NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY }}" >> .env.production
          echo "PAYSTACK_SECRET_KEY=${{ secrets.PAYSTACK_SECRET_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_URL=https://quintjtreswyjxxogcjt.supabase.co" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.production

      # ✅ Configure Next.js for Node.js Server
      - name: Configure Next.js for Node.js Server
        run: |
          cat > next.config.js << 'EOF'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            eslint: {
              ignoreDuringBuilds: true
            },
            experimental: {
              webpackBuildWorker: false
            },
            swcMinify: false
          }
          module.exports = nextConfig
          EOF

      # ✅ Create server.js for cPanel Node.js
      - name: Create Server Entry Point
        run: |
          cat > server.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')

          const dev = process.env.NODE_ENV !== 'production'
          const hostname = 'localhost'
          const port = 3000

          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()

          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true)
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            })
            .listen(port, (err) => {
              if (err) throw err
              console.log(`> Ready on http://${hostname}:${port}`)
            })
          })
          EOF

      # ✅ Install dependencies, generate Prisma client, seed DB, and build
      - name: Install, Generate Prisma Client, Seed DB, Build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TOKEN_EXPIRY: ${{ secrets.TOKEN_EXPIRY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        run: |
          npm ci
          npx prisma generate
          npx prisma db seed
          NODE_OPTIONS=--max-old-space-size=512 npm run build

      # ✅ Update package.json for cPanel
      - name: Update Package.json for cPanel
        run: |
          npm pkg set scripts.start="node server.js"
          echo "✓ Updated start script in package.json"

      # ✅ Create .htaccess for reverse proxy in a separate folder
      - name: Create Public Files
        run: |
          # Create a separate directory for public_html files
          mkdir -p public_html_files
          cat > public_html_files/.htaccess << 'EOF'
          RewriteEngine On

          # Redirect HTTP to HTTPS
          RewriteCond %{HTTPS} off
          RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

          # Enable proxy to Node.js app
          ProxyPreserveHost On
          ProxyPass / http://localhost:3000/
          ProxyPassReverse / http://localhost:3000/

          # Error documents
          ErrorDocument 502 "Application is starting up. Please try again in a moment."
          ErrorDocument 503 "Application is undergoing maintenance. Please try again later."
          EOF

          # Create a simple maintenance page
          cat > public_html_files/maintenance.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Application Starting</title>
          </head>
          <body>
              <h1>Application is Starting</h1>
              <p>Please wait a moment and refresh the page.</p>
          </body>
          </html>
          EOF

      # ✅ Clean up unnecessary files before deployment
      - name: Prepare Deployment Directory
        run: |
          # Remove development files but keep build artifacts
          rm -rf node_modules
          rm -rf .git
          rm -rf prisma
          rm -rf .github
          rm -f .env
          rm -f .env.local
          rm -f .env.development
          rm -f README.md
          
          # Keep .next folder for production
          if [ -d ".next" ]; then
            echo "✓ .next build directory preserved"
          fi

      # ✅ Test network connectivity first
      - name: Test FTP Server Connectivity
        run: |
          nslookup ${{ secrets.FTP_SERVER }} || echo "DNS lookup failed"
          ping -c 3 ${{ secrets.FTP_SERVER }} || echo "Ping test failed"

      # ✅ DEPLOY 1: App files to /newGSPA/ (Node.js app directory)
      - name: Deploy App to Node.js Directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          server-dir: /newGSPA/
          local-dir: ./
          dangerous-clean-slate: true  # Clean the directory first
          exclude: |
            **/.git*
            **/.github/*
            **/node_modules/*
            **/.env*
            **/README.md
            **/prisma/*
            **/public_html_files/*  # Exclude public_html files from this deployment

      # ✅ DEPLOY 2: Only .htaccess to /public_html/ (reverse proxy)
      - name: Deploy Reverse Proxy to public_html
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          server-dir: /public_html/
          local-dir: ./public_html_files/  # Only deploy from this specific folder
          dangerous-clean-slate: true  # Clean public_html completely